/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/forms/src/directives/ng_control_status';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
export class Wrapper_NgControlStatus {
  /*private*/ _eventHandler:Function;
  context:import0.NgControlStatus;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  constructor(p0:any) {
    this._changed = false;
    this.context = new import0.NgControlStatus(p0);
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
    this._expr_3 = import1.UNINITIALIZED;
    this._expr_4 = import1.UNINITIALIZED;
    this._expr_5 = import1.UNINITIALIZED;
    this._expr_6 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_0:any = this.context.ngClassUntouched;
    if (import3.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      view.renderer.setElementClass(el,'ng-untouched',currVal_0);
      this._expr_0 = currVal_0;
    }
    const currVal_1:any = this.context.ngClassTouched;
    if (import3.checkBinding(throwOnChange,this._expr_1,currVal_1)) {
      view.renderer.setElementClass(el,'ng-touched',currVal_1);
      this._expr_1 = currVal_1;
    }
    const currVal_2:any = this.context.ngClassPristine;
    if (import3.checkBinding(throwOnChange,this._expr_2,currVal_2)) {
      view.renderer.setElementClass(el,'ng-pristine',currVal_2);
      this._expr_2 = currVal_2;
    }
    const currVal_3:any = this.context.ngClassDirty;
    if (import3.checkBinding(throwOnChange,this._expr_3,currVal_3)) {
      view.renderer.setElementClass(el,'ng-dirty',currVal_3);
      this._expr_3 = currVal_3;
    }
    const currVal_4:any = this.context.ngClassValid;
    if (import3.checkBinding(throwOnChange,this._expr_4,currVal_4)) {
      view.renderer.setElementClass(el,'ng-valid',currVal_4);
      this._expr_4 = currVal_4;
    }
    const currVal_5:any = this.context.ngClassInvalid;
    if (import3.checkBinding(throwOnChange,this._expr_5,currVal_5)) {
      view.renderer.setElementClass(el,'ng-invalid',currVal_5);
      this._expr_5 = currVal_5;
    }
    const currVal_6:any = this.context.ngClassPending;
    if (import3.checkBinding(throwOnChange,this._expr_6,currVal_6)) {
      view.renderer.setElementClass(el,'ng-pending',currVal_6);
      this._expr_6 = currVal_6;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
export class Wrapper_NgControlStatusGroup {
  /*private*/ _eventHandler:Function;
  context:import0.NgControlStatusGroup;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  constructor(p0:any) {
    this._changed = false;
    this.context = new import0.NgControlStatusGroup(p0);
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
    this._expr_3 = import1.UNINITIALIZED;
    this._expr_4 = import1.UNINITIALIZED;
    this._expr_5 = import1.UNINITIALIZED;
    this._expr_6 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_0:any = this.context.ngClassUntouched;
    if (import3.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      view.renderer.setElementClass(el,'ng-untouched',currVal_0);
      this._expr_0 = currVal_0;
    }
    const currVal_1:any = this.context.ngClassTouched;
    if (import3.checkBinding(throwOnChange,this._expr_1,currVal_1)) {
      view.renderer.setElementClass(el,'ng-touched',currVal_1);
      this._expr_1 = currVal_1;
    }
    const currVal_2:any = this.context.ngClassPristine;
    if (import3.checkBinding(throwOnChange,this._expr_2,currVal_2)) {
      view.renderer.setElementClass(el,'ng-pristine',currVal_2);
      this._expr_2 = currVal_2;
    }
    const currVal_3:any = this.context.ngClassDirty;
    if (import3.checkBinding(throwOnChange,this._expr_3,currVal_3)) {
      view.renderer.setElementClass(el,'ng-dirty',currVal_3);
      this._expr_3 = currVal_3;
    }
    const currVal_4:any = this.context.ngClassValid;
    if (import3.checkBinding(throwOnChange,this._expr_4,currVal_4)) {
      view.renderer.setElementClass(el,'ng-valid',currVal_4);
      this._expr_4 = currVal_4;
    }
    const currVal_5:any = this.context.ngClassInvalid;
    if (import3.checkBinding(throwOnChange,this._expr_5,currVal_5)) {
      view.renderer.setElementClass(el,'ng-invalid',currVal_5);
      this._expr_5 = currVal_5;
    }
    const currVal_6:any = this.context.ngClassPending;
    if (import3.checkBinding(throwOnChange,this._expr_6,currVal_6)) {
      view.renderer.setElementClass(el,'ng-pending',currVal_6);
      this._expr_6 = currVal_6;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}